import ast
import datetime
import random as rnd
from datetime import datetime

import folium
import pandas as pd

from src.config import Config
from src.maps import Maps
from src.utils import *

"""
Hypothesis: 
    - Emission same along a distance (CO2/m = const)
    - Maps API provided same path between two points 
    - Roads are founded with google maps API ("driving" mode) for a departure on the 22-11-2023 at 10:00    
"""

def raw_to_smart_data(data_path1, data_path2, output_path="./data/smart_data.csv"):
    """
    Convert raw data to raw data + google usable point
    :param data:
    :return: file with format ["Versandbhf_neu:V";"Versandbhf_neu:V_lat";"Versandbhf_neu:V_long";"Empfang";"Empfang_lat";"Empfang_long";"CO2_emission(gr)";"CO2_emission(t)"]
    -> [gareA_lat; gareA_long; gareB_lat; gareB_long; CO2_gr...]

    !!! GPS.xlsx have been added a row manually -> Bruck a. d. Mur 	47,4105556	15,2686111
    Assumption Bruck a. d. Mur = Bruck a. d. Mur Fbf

    !!! data_raw.xlsx have been eddited -> remove space before and after Kufstein line 2243
    """
    GPS = pd.read_excel(data_path2)
    GPS = GPS.set_index("Stations")

    train_lines = pd.read_excel(data_path1, header=1)
    list_dict = []

    for i, row in train_lines.iterrows():
        try:
            new_row = {'station_A_lat': GPS.loc[row["Versandbhf_neu:V"], 'Latitude'],
                       'station_A_long': GPS.loc[row["Versandbhf_neu:V"], 'Longitude'],
                       'station_B_lat': GPS.loc[row["Empfang"], 'Latitude'],
                       'station_B_long': GPS.loc[row["Empfang"], 'Longitude'],
                       'CO2': row["CO2 emission (gr)"]}
            list_dict.append(new_row)
        except:
            print("Error with row: ", row, "at index: ", i)
    data = pd.DataFrame(list_dict)
    data.to_csv(output_path, sep=';', index=False)

    return output_path

def smart_to_points_data(data_path, map, departure_date, online=True, output_path="../data/poly_points_data.csv"):
    """
    Convert smart data to list of [[n_w_point, s_e_point, [points], CO2_gr]...]
    :param data:
    :return:
    -> [[n_w_point, s_e_point, [points], CO2_gr]...]
    """
    # load data with pandas as a csv file
    data = pd.read_csv(data_path, sep=";")

    #Write in a csv file at output_path
    with open(output_path, "w") as f:
        f.write("northeast;southwest;points;CO2_gr;distance\n")
        for i, row in data.iterrows():
            if i >= 7780:
                if i % 10 == 0:
                    print("i=", i, "out of", len(data))
                station_A = str(row["station_A_lat"])+","+str(row["station_A_long"])
                station_B = str(row["station_B_lat"])+","+str(row["station_B_long"])
                CO2 = float(row["CO2"])
                if online:
                    distance, decoded_polyline, northeast, southwest = map.get_directions(station_A, station_B, departure_date, mode="driving")
                else:
                    #generate random values
                    decoded_polyline = [(rnd.random()*25, rnd.random()*25) for i in range(15)]
                    northeast = (rnd.random()*25, rnd.random()*25)
                    southwest = (rnd.random()*25, rnd.random()*25)
                    distance = rnd.random()*1000
                f.write(str(northeast)+";")
                f.write(str(southwest)+";")
                f.write(str(decoded_polyline)+";")
                f.write(str(CO2)+";")
                f.write(str(distance)+"\n")
    return output_path

def points_to_polyline_data(data_path="../data/poly_points_data.csv", output_path="../data/final_poly.csv"):
    """
    Convert points data to list of acctual polyline to draw (with info)
    :param data: list of [(northeast, southwest, [list of points], CO2m), ...]
    :return: the reduced non overlappong same set (northeast, southwest, [list of points], CO2m)
    """
    df = pd.read_csv(data_path, sep=";")
    df['northeast'] = df['northeast'].apply(ast.literal_eval)
    df['northeast'] = df['northeast'].apply(lambda x: (x['lat'], x['lng']))
    df['southwest'] = df['southwest'].apply(ast.literal_eval)
    df['southwest'] = df['southwest'].apply(lambda x: (x['lat'], x['lng']))
    df['points'] = df['points'].apply(ast.literal_eval)
    pd.to_numeric(df['CO2_gr'], errors='coerce')
    pd.to_numeric(df['distance'], errors='coerce')
    df['CO2_gr_m'] = df.apply(lambda row: row['CO2_gr']/row['distance'] if row['distance'] != 0 else 0, axis=1)

    # transform data to list of [(northeast, southwest, [list of points], CO2m), ...]
    df = df.to_dict(orient='records')
    data=[]
    print("Data transformed ")
    for record in df:
        data.append(list(record.values()))

    final_poly = solve_multi_poly(data, output_path=output_path)
    return final_poly

def draw_polyline_data(data_path, map):
    """
    Draw polyline data
    :param data: list of [(northeast, southwest, [list of points], CO2_gr/m), ...]
    :return:
    """
    df = pd.read_csv(data_path, sep=";")
    max_CO2m = float(df["CO2_gr_m"].max())
    min_CO2m = float(df["CO2_gr_m"].min())

    if max_CO2m == min_CO2m:
        min_CO2m -= 1 #avoid division by 0

    df['points'] = df['points'].apply(ast.literal_eval)

    # po1 = [(46.96228, 14.79441), (46.96325, 14.79217), (46.96422, 14.78971), (46.96532, 14.78905), (46.96689, 14.78789), (46.9681, 14.78688), (46.96845, 14.7852), (46.97155, 14.78248), (46.97395, 14.77987), (46.97413, 14.77838), (46.97447, 14.7782), (46.97532, 14.77818), (46.97644, 14.77867), (46.97888, 14.77688), (46.9806, 14.7761), (46.98233, 14.77322), (46.98368, 14.77171), (46.9865, 14.77049), (46.99208, 14.76279), (46.99503, 14.76045), (47.0005, 14.75411), (47.00265, 14.75252), (47.00628, 14.75077), (47.0098, 14.74623), (47.01508, 14.73719), (47.01775, 14.73305), (47.02064, 14.73188), (47.02485, 14.73183), (47.02633, 14.72887), (47.02794, 14.72686), (47.03191, 14.72584), (47.03692, 14.72584), (47.03933, 14.72393), (47.04254, 14.72019), (47.04461, 14.71887), (47.04672, 14.71726), (47.0508, 14.71518), (47.05285, 14.71507), (47.05694, 14.71019), (47.0631, 14.70218), (47.067, 14.70008), (47.07114, 14.696), (47.07416, 14.69357), (47.07757, 14.69287), (47.07992, 14.69094), (47.0837, 14.6883), (47.0876, 14.6863), (47.09062, 14.68397), (47.09199, 14.68482), (47.09716, 14.6899), (47.0991, 14.69303), (47.10178, 14.69708), (47.10611, 14.70283), (47.1105, 14.70563), (47.11286, 14.70684), (47.11453, 14.70918), (47.116, 14.71357), (47.11949, 14.71908), (47.12118, 14.72237), (47.12224, 14.73033), (47.12259, 14.73482), (47.12337, 14.73654), (47.12457, 14.73713), (47.12895, 14.7389), (47.12995, 14.73944), (47.13135, 14.73855), (47.13581, 14.73618), (47.13872, 14.73547), (47.14147, 14.73584), (47.14475, 14.73654), (47.14889, 14.73501), (47.15066, 14.73352), (47.15588, 14.72767), (47.15634, 14.72799), (47.15664, 14.72718), (47.15711, 14.72484), (47.15844, 14.72389), (47.16044, 14.72443), (47.16593, 14.72622), (47.17165, 14.72642), (47.17386, 14.72627), (47.17784, 14.72362), (47.18059, 14.72174), (47.18342, 14.7212), (47.18683, 14.72056), (47.18996, 14.72116), (47.19477, 14.72338), (47.19491, 14.72315), (47.19483, 14.72274), (47.19498, 14.71881), (47.19437, 14.7176), (47.19247, 14.71533), (47.18968, 14.70928), (47.18711, 14.69788), (47.18566, 14.68391), (47.18464, 14.67686), (47.18088, 14.66662), (47.17702, 14.65846), (47.17561, 14.65407), (47.176, 14.64884), (47.17711, 14.64395), (47.17684, 14.63936), (47.17454, 14.63306), (47.17337, 14.63142), (47.17239, 14.62918), (47.1728, 14.62276), (47.17485, 14.61392), (47.17566, 14.60951), (47.17865, 14.60458), (47.18292, 14.59825), (47.18495, 14.59938), (47.18857, 14.60019), (47.19159, 14.59962), (47.19547, 14.59688), (47.20028, 14.58961), (47.20533, 14.58448), (47.20766, 14.581), (47.20959, 14.57638), (47.21318, 14.57482), (47.21481, 14.57427), (47.2164, 14.57477), (47.21793, 14.57417), (47.21978, 14.56966), (47.22282, 14.56342), (47.22597, 14.5596), (47.22883, 14.55484), (47.2328, 14.54829), (47.23569, 14.54402), (47.2383, 14.53824), (47.24494, 14.531), (47.25232, 14.52202), (47.25533, 14.51731), (47.25613, 14.51144), (47.25753, 14.50744), (47.25929, 14.50364), (47.26043, 14.49891), (47.26068, 14.4962), (47.26154, 14.49452), (47.26565, 14.49089), (47.26958, 14.48726), (47.27257, 14.4846), (47.27614, 14.48201), (47.28073, 14.48046), (47.28509, 14.48181), (47.28934, 14.48512), (47.29447, 14.48669), (47.29831, 14.48717), (47.30032, 14.48712), (47.30135, 14.4877), (47.3025, 14.48739), (47.30545, 14.4865), (47.30782, 14.4863), (47.30939, 14.48521), (47.31071, 14.48535), (47.31188, 14.48435), (47.31321, 14.48279), (47.31659, 14.48177), (47.32106, 14.4792), (47.3234, 14.47784), (47.32484, 14.47567), (47.32624, 14.47256), (47.3278, 14.47219), (47.33118, 14.47196), (47.3326, 14.47145), (47.33572, 14.47205), (47.33899, 14.47238), (47.34231, 14.47226), (47.34399, 14.47291), (47.34558, 14.47237), (47.34683, 14.47154), (47.34885, 14.4719), (47.35162, 14.47159), (47.35658, 14.46949), (47.36253, 14.46676), (47.36682, 14.46313), (47.36992, 14.46187), (47.37339, 14.46086), (47.37594, 14.46105), (47.37739, 14.46233), (47.38043, 14.4635), (47.38317, 14.46265), (47.38614, 14.46379), (47.38911, 14.46675), (47.39032, 14.46671), (47.39197, 14.46505), (47.39354, 14.4641), (47.3952, 14.46501), (47.40146, 14.46342), (47.40743, 14.46452), (47.41138, 14.4639), (47.41467, 14.46284), (47.41697, 14.46111), (47.41873, 14.46049), (47.42096, 14.46218), (47.42235, 14.46313), (47.4251, 14.46283), (47.42973, 14.46649), (47.43163, 14.46935), (47.43244, 14.47226), (47.43264, 14.47666), (47.4336, 14.481), (47.43332, 14.48584), (47.43461, 14.48977), (47.43549, 14.49203), (47.43523, 14.49496), (47.43886, 14.50268), (47.44261, 14.50572), (47.44478, 14.50948), (47.44639, 14.50999), (47.4473, 14.5087), (47.44748, 14.50641), (47.4486, 14.50474), (47.45033, 14.50136), (47.45104, 14.49912), (47.45199, 14.49851), (47.45308, 14.49588), (47.4552, 14.49183), (47.46027, 14.48729), (47.46172, 14.48626), (47.46331, 14.4862), (47.46559, 14.48632), (47.46815, 14.48541), (47.4691, 14.48576), (47.47085, 14.48524), (47.47301, 14.48438), (47.47484, 14.4838), (47.47347, 14.48492), (47.47333, 14.48543), (47.47511, 14.48478), (47.47587, 14.48387), (47.47737, 14.48391), (47.47967, 14.48586), (47.48128, 14.48725), (47.48273, 14.48731), (47.48492, 14.48667), (47.48768, 14.48732), (47.48809, 14.48751), (47.48867, 14.48565), (47.48886, 14.4853), (47.48893, 14.48517), (47.48886, 14.48504), (47.48889, 14.48351), (47.48915, 14.47941), (47.49009, 14.4763), (47.49279, 14.47038), (47.49331, 14.46898), (47.49356, 14.46828), (47.49378, 14.46768), (47.49467, 14.46829), (47.49565, 14.46892), (47.49625, 14.46933), (47.49704, 14.47053), (47.49855, 14.4728), (47.49914, 14.47389), (47.50064, 14.47528), (47.50331, 14.47685), (47.50465, 14.47636), (47.50572, 14.47354), (47.50849, 14.46852), (47.50967, 14.46574), (47.51123, 14.4644), (47.51202, 14.46164), (47.51299, 14.46121), (47.51239, 14.46004), (47.51215, 14.45735), (47.51347, 14.45656), (47.51423, 14.45483), (47.51515, 14.45263), (47.51549, 14.45036), (47.5184, 14.44623), (47.51853, 14.4432), (47.5192, 14.44275), (47.52049, 14.44341), (47.52265, 14.44621), (47.52407, 14.44975), (47.52683, 14.46374), (47.5284, 14.46671), (47.52929, 14.46768), (47.53022, 14.46742), (47.53162, 14.46717), (47.53256, 14.46764), (47.53416, 14.46927), (47.53606, 14.46987), (47.5375, 14.47143), (47.53893, 14.47431), (47.53983, 14.47482), (47.54045, 14.47288), (47.54214, 14.47159), (47.54256, 14.47328), (47.54381, 14.47424), (47.5452, 14.47186), (47.54708, 14.46901), (47.55055, 14.46866), (47.55242, 14.46989), (47.55519, 14.46787), (47.55749, 14.46688), (47.55593, 14.46591), (47.55729, 14.46504), (47.55719, 14.46417), (47.55641, 14.46414), (47.55571, 14.46459), (47.55442, 14.464), (47.55458, 14.46329), (47.55579, 14.46321), (47.55679, 14.4617), (47.55764, 14.46047), (47.55928, 14.46039), (47.56092, 14.46108), (47.56427, 14.45993), (47.56771, 14.45983), (47.57074, 14.46004), (47.57301, 14.46118)]
    # po2 = [(47.2656, 12.81645), (47.26445, 12.82216), (47.26309, 12.8234), (47.26413, 12.82417), (47.26667, 12.82405), (47.27037, 12.82495), (47.27483, 12.82639), (47.27822, 12.82609), (47.2791, 12.82417), (47.27982, 12.82416), (47.28003, 12.82933), (47.28021, 12.84055), (47.28363, 12.84537), (47.28539, 12.84833), (47.2855, 12.85042), (47.28412, 12.86045), (47.28415, 12.8697), (47.28598, 12.87968), (47.28793, 12.88489), (47.28808, 12.88924), (47.28899, 12.89402), (47.28924, 12.90519), (47.28884, 12.91781), (47.2894, 12.92565), (47.28912, 12.93171), (47.28971, 12.93462), (47.29139, 12.9366), (47.29322, 12.94616), (47.29286, 12.95319), (47.29191, 12.96532), (47.29424, 12.97345), (47.29513, 12.98054), (47.29921, 12.99209), (47.30136, 12.99795), (47.30429, 13.0041), (47.30615, 13.00661), (47.30741, 13.0102), (47.30708, 13.01692), (47.30541, 13.02794), (47.30217, 13.03439), (47.29855, 13.04076), (47.2962, 13.04529), (47.29402, 13.05236), (47.29471, 13.06122), (47.29694, 13.0741), (47.29748, 13.08264), (47.30073, 13.09722), (47.30205, 13.10515), (47.30663, 13.11129), (47.30957, 13.11625), (47.31044, 13.12358), (47.31095, 13.12651), (47.31216, 13.12854), (47.31607, 13.13191), (47.32054, 13.13457), (47.32286, 13.1375), (47.32402, 13.14084), (47.32593, 13.1562), (47.32402, 13.16416), (47.3233, 13.17155), (47.32325, 13.17409), (47.32483, 13.17664), (47.32812, 13.18093), (47.32963, 13.18578), (47.33275, 13.18828), (47.33807, 13.18942), (47.34734, 13.19385), (47.35199, 13.19379), (47.35464, 13.19625), (47.35809, 13.19984), (47.36184, 13.20062), (47.36917, 13.20521), (47.37922, 13.20993), (47.38294, 13.21113), (47.38664, 13.21408), (47.39003, 13.21787), (47.39225, 13.22014), (47.39386, 13.22391), (47.39687, 13.22664), (47.40034, 13.22672), (47.40617, 13.2251), (47.41301, 13.22315), (47.42132, 13.22693), (47.42724, 13.22456), (47.43081, 13.22458), (47.43524, 13.2253), (47.43819, 13.2238), (47.43811, 13.22522), (47.43679, 13.23127), (47.43806, 13.23719), (47.43622, 13.24347), (47.43444, 13.25364), (47.43389, 13.26899), (47.43034, 13.28449), (47.4286, 13.29415), (47.42143, 13.30593), (47.4194, 13.31139), (47.41881, 13.31603), (47.42346, 13.33081), (47.42642, 13.34528), (47.42501, 13.35246), (47.42376, 13.36495), (47.42119, 13.3817), (47.41906, 13.3859), (47.41621, 13.38776), (47.41364, 13.38834), (47.41114, 13.39025), (47.40796, 13.39304), (47.39466, 13.3956), (47.39264, 13.39602), (47.392, 13.39892), (47.39243, 13.4068), (47.39157, 13.4097), (47.38926, 13.41184), (47.38588, 13.41614), (47.38478, 13.42223), (47.38356, 13.43741), (47.38626, 13.4487), (47.38611, 13.45946), (47.38593, 13.46964), (47.38544, 13.47337), (47.38654, 13.47582), (47.38782, 13.4871), (47.38759, 13.49183), (47.38859, 13.49548), (47.39073, 13.50057), (47.39101, 13.50576), (47.39185, 13.50898), (47.39472, 13.51354), (47.39771, 13.53014), (47.39781, 13.53475), (47.39889, 13.53784), (47.39994, 13.54109), (47.40053, 13.54721), (47.40419, 13.55971), (47.40487, 13.56267), (47.4042, 13.56976), (47.40412, 13.57439), (47.40269, 13.57849), (47.40036, 13.58297), (47.39914, 13.58869), (47.39624, 13.59117), (47.39435, 13.59168), (47.39257, 13.59387), (47.38942, 13.59887), (47.38847, 13.60375), (47.38831, 13.60835), (47.38902, 13.61672), (47.38878, 13.62146), (47.38846, 13.6279), (47.38914, 13.63247), (47.3884, 13.63776), (47.38906, 13.64267), (47.3884, 13.6478), (47.38809, 13.65005), (47.38912, 13.65355), (47.39074, 13.66141), (47.39142, 13.66865), (47.39516, 13.67461), (47.39651, 13.68503), (47.39644, 13.69215), (47.39487, 13.69483), (47.39488, 13.69809), (47.39921, 13.71112), (47.40278, 13.72506), (47.40607, 13.74063), (47.40788, 13.75589), (47.41108, 13.76491), (47.41168, 13.77071), (47.41208, 13.78109), (47.41362, 13.79057), (47.41388, 13.80098), (47.41702, 13.81527), (47.41873, 13.82128), (47.4227, 13.83063), (47.42383, 13.84089), (47.42501, 13.8456), (47.42361, 13.85097), (47.42344, 13.86235), (47.42568, 13.86749), (47.42857, 13.87222), (47.42958, 13.87812), (47.43188, 13.88712), (47.43356, 13.89282), (47.43594, 13.89753), (47.44008, 13.9033), (47.44258, 13.91205), (47.44515, 13.9132), (47.4518, 13.91206), (47.45344, 13.91247), (47.45508, 13.91471), (47.45796, 13.92079), (47.46362, 13.92823), (47.46984, 13.93834), (47.47339, 13.94667), (47.47584, 13.95489), (47.47975, 13.96185), (47.48237, 13.96541), (47.48314, 13.96844), (47.48532, 13.97481), (47.48578, 13.98428), (47.48671, 13.99816), (47.48807, 14.00616), (47.49207, 14.0198), (47.49508, 14.02733), (47.49748, 14.03018), (47.50076, 14.03738), (47.50281, 14.04226), (47.50578, 14.04593), (47.51017, 14.05604), (47.51242, 14.06375), (47.51338, 14.07071), (47.51698, 14.07754), (47.51914, 14.07887), (47.52241, 14.08213), (47.52628, 14.08655), (47.52802, 14.0903), (47.52728, 14.0953), (47.52553, 14.10023), (47.5247, 14.10405), (47.52526, 14.10862), (47.53113, 14.12257), (47.53293, 14.12322), (47.53564, 14.12111), (47.53819, 14.11926), (47.54093, 14.1199), (47.54364, 14.12422), (47.54508, 14.12922), (47.54682, 14.13534), (47.54918, 14.14038), (47.55202, 14.15068), (47.55546, 14.15643), (47.55583, 14.1623), (47.558, 14.16622), (47.55931, 14.17381), (47.56099, 14.17822), (47.56237, 14.18522), (47.5662, 14.19785), (47.56724, 14.2058), (47.56995, 14.21286), (47.56938, 14.22467), (47.56653, 14.23494), (47.56163, 14.24678), (47.56005, 14.25118), (47.55998, 14.25692), (47.56036, 14.26055), (47.56276, 14.27002), (47.56402, 14.2741), (47.56335, 14.28219), (47.56272, 14.28796), (47.56317, 14.28989), (47.56309, 14.29857), (47.56365, 14.30408), (47.56823, 14.30924), (47.57127, 14.31191), (47.57359, 14.31373), (47.57419, 14.31619), (47.57587, 14.31917), (47.57984, 14.32377), (47.58188, 14.32722), (47.58149, 14.33196), (47.58401, 14.33777), (47.58523, 14.34173), (47.58653, 14.34605), (47.58556, 14.35652), (47.58642, 14.36927), (47.58936, 14.37363), (47.5892, 14.37667), (47.5872, 14.38325), (47.58543, 14.38924), (47.58141, 14.40048), (47.58057, 14.40342), (47.58297, 14.40656), (47.58562, 14.40813), (47.58576, 14.41133), (47.58525, 14.41432), (47.58353, 14.41781), (47.58291, 14.4211), (47.5832, 14.42608), (47.58314, 14.43323), (47.5839, 14.44143), (47.58423, 14.44772), (47.58231, 14.45138), (47.58223, 14.45933), (47.57305, 14.46119)]
    # po3 = [(47.9748, 13.61118), (47.97445, 13.60978), (47.97344, 13.60899), (47.97254, 13.60818), (47.97191, 13.60799), (47.97173, 13.60845), (47.97128, 13.60861), (47.97049, 13.6082), (47.9676, 13.6075), (47.96525, 13.6075), (47.96457, 13.60803), (47.96336, 13.6079), (47.96249, 13.60758), (47.96155, 13.60771), (47.96056, 13.60757), (47.95986, 13.60766), (47.95984, 13.60785), (47.95995, 13.60873), (47.95987, 13.60885), (47.95983, 13.60888), (47.9598, 13.60897), (47.95982, 13.60902), (47.95858, 13.60979), (47.95689, 13.60983), (47.95465, 13.61027), (47.953, 13.61131), (47.95204, 13.61413), (47.95003, 13.61165), (47.94997, 13.61198), (47.95048, 13.61275), (47.95091, 13.61766), (47.9522, 13.62443), (47.95526, 13.63821), (47.9568, 13.6462), (47.95671, 13.65141), (47.95571, 13.65545), (47.95365, 13.66014), (47.95015, 13.66793), (47.94906, 13.67159), (47.9483, 13.67702), (47.94837, 13.68339), (47.9502, 13.69281), (47.95114, 13.69911), (47.95032, 13.70565), (47.95009, 13.70987), (47.95052, 13.71293), (47.95136, 13.71644), (47.95176, 13.72006), (47.95227, 13.72381), (47.95352, 13.72794), (47.95441, 13.72972), (47.95618, 13.73257), (47.9578, 13.73571), (47.96157, 13.74765), (47.9635, 13.75409), (47.965, 13.75876), (47.96715, 13.76294), (47.96977, 13.76593), (47.97401, 13.76905), (47.98367, 13.77578), (47.98803, 13.77933), (47.99202, 13.78466), (47.99478, 13.7902), (47.99755, 13.79664), (47.99959, 13.80145), (48.00145, 13.80819), (48.00436, 13.83368), (48.00473, 13.84528), (48.00451, 13.85002), (48.0032, 13.87646), (48.00295, 13.88945), (48.00351, 13.89685), (48.00426, 13.90209), (48.00542, 13.90777), (48.00858, 13.91889), (48.01432, 13.93732), (48.01696, 13.94496), (48.02124, 13.95746), (48.02435, 13.96519), (48.02906, 13.97302), (48.03661, 13.98494), (48.04044, 13.99101), (48.04416, 13.99737), (48.04676, 14.00562), (48.04926, 14.01392), (48.05108, 14.01892), (48.05469, 14.02834), (48.05792, 14.03314), (48.06017, 14.03561), (48.06079, 14.03721), (48.06111, 14.03919), (48.06084, 14.04056), (48.05846, 14.04433), (48.05581, 14.04767), (48.0543, 14.04935), (48.04882, 14.05436), (48.04364, 14.0578), (48.03605, 14.06096), (48.02708, 14.06418), (48.02109, 14.06628), (48.01376, 14.06924), (48.00865, 14.07238), (48.00261, 14.07768), (47.99704, 14.08408), (47.99353, 14.08759), (47.99098, 14.08944), (47.98797, 14.09098), (47.98412, 14.09207), (47.97944, 14.0925), (47.97388, 14.09327), (47.96978, 14.09437), (47.96481, 14.09634), (47.95989, 14.09887), (47.9545, 14.10127), (47.95102, 14.10162), (47.94943, 14.10144), (47.94721, 14.10082), (47.94413, 14.09931), (47.93724, 14.09573), (47.93489, 14.09552), (47.93318, 14.09589), (47.92817, 14.09865), (47.92488, 14.10061), (47.92337, 14.10143), (47.9223, 14.10177), (47.91989, 14.10177), (47.91535, 14.10129), (47.91018, 14.10089), (47.90426, 14.1013), (47.89854, 14.10282), (47.89384, 14.1047), (47.89133, 14.10543), (47.88959, 14.10606), (47.8872, 14.10789), (47.88376, 14.11015), (47.88153, 14.11119), (47.87839, 14.11251), (47.87517, 14.11415), (47.8739, 14.11558), (47.87295, 14.11739), (47.87103, 14.1218), (47.86943, 14.12428), (47.86775, 14.12634), (47.86659, 14.12871), (47.86588, 14.13251), (47.86634, 14.13622), (47.86704, 14.13944), (47.86693, 14.14265), (47.8661, 14.14513), (47.86448, 14.14831), (47.86132, 14.15249), (47.85939, 14.15402), (47.85486, 14.1567), (47.85224, 14.15941), (47.84992, 14.16338), (47.84775, 14.16695), (47.84589, 14.16886), (47.84372, 14.16998), (47.83995, 14.17043), (47.8358, 14.17068), (47.8346, 14.17048), (47.83224, 14.16912), (47.82912, 14.16667), (47.8274, 14.166), (47.8248, 14.16576), (47.82351, 14.16604), (47.82009, 14.16783), (47.81801, 14.16918), (47.81554, 14.16994), (47.81361, 14.16973), (47.81139, 14.16976), (47.80835, 14.17162), (47.80421, 14.17431), (47.79878, 14.1764), (47.79426, 14.17687), (47.79104, 14.17644), (47.78673, 14.17499), (47.78399, 14.17386), (47.78252, 14.1738), (47.78117, 14.17422), (47.77835, 14.17554), (47.77645, 14.17544), (47.77434, 14.17542), (47.77302, 14.17609), (47.77218, 14.17697), (47.76972, 14.18216), (47.76676, 14.18931), (47.75994, 14.21106), (47.75857, 14.21469), (47.75689, 14.21734), (47.7537, 14.2224), (47.75264, 14.2255), (47.75175, 14.22984), (47.75171, 14.23891), (47.75077, 14.24787), (47.74987, 14.25249), (47.74881, 14.25599), (47.74655, 14.25908), (47.74401, 14.26108), (47.74278, 14.26256), (47.74181, 14.26435), (47.74091, 14.26706), (47.74011, 14.2727), (47.73991, 14.282), (47.73889, 14.28573), (47.73721, 14.28879), (47.73359, 14.29261), (47.72979, 14.29772), (47.72758, 14.30002), (47.72542, 14.30164), (47.72135, 14.30341), (47.71561, 14.30497), (47.70962, 14.30772), (47.70024, 14.31422), (47.69572, 14.31583), (47.6924, 14.31686), (47.6889, 14.31928), (47.68478, 14.32287), (47.67977, 14.32618), (47.67332, 14.32899), (47.66682, 14.33255), (47.6619, 14.33515), (47.65977, 14.33566), (47.65667, 14.33539), (47.65259, 14.3341), (47.64854, 14.33386), (47.64772, 14.33353), (47.64527, 14.33183), (47.64192, 14.32928), (47.63918, 14.3292), (47.63685, 14.33002), (47.63212, 14.33236), (47.62036, 14.33784), (47.61374, 14.34123), (47.60906, 14.3458), (47.60758, 14.34733), (47.60561, 14.34849), (47.60329, 14.34874), (47.59861, 14.34892), (47.59592, 14.34888), (47.59233, 14.34833), (47.59054, 14.34712), (47.58846, 14.34444), (47.58675, 14.34004), (47.58429, 14.33093), (47.58281, 14.32616), (47.58056, 14.3219), (47.57744, 14.31792), (47.57563, 14.31587), (47.57539, 14.31437), (47.57421, 14.31376), (47.57374, 14.31402), (47.57402, 14.31488), (47.57423, 14.31646), (47.57486, 14.31804), (47.57827, 14.32189), (47.58169, 14.32578), (47.58182, 14.32785), (47.58151, 14.33023), (47.58152, 14.33223), (47.58217, 14.33423), (47.58325, 14.33603), (47.58369, 14.3373), (47.58486, 14.33876), (47.58503, 14.34104), (47.58628, 14.34488), (47.58649, 14.34643), (47.58605, 14.34881), (47.5861, 14.35174), (47.58562, 14.35464), (47.58572, 14.36005), (47.58583, 14.36771), (47.5867, 14.36963), (47.58844, 14.37226), (47.58952, 14.37413), (47.58947, 14.37598), (47.58831, 14.37864), (47.58744, 14.38195), (47.58554, 14.38853), (47.58458, 14.39091), (47.58388, 14.39321), (47.58201, 14.39933), (47.58077, 14.40187), (47.58061, 14.40374), (47.58189, 14.40594), (47.58261, 14.40653), (47.5835, 14.40653), (47.5849, 14.40701), (47.58571, 14.40858), (47.58563, 14.41016), (47.58561, 14.41357), (47.58419, 14.41577), (47.58296, 14.41992), (47.58297, 14.42147), (47.58345, 14.42486), (47.5829, 14.42792), (47.58306, 14.43217), (47.58401, 14.43934), (47.58414, 14.44629), (47.58414, 14.44819), (47.5828, 14.45028), (47.58226, 14.45163), (47.58238, 14.45382), (47.58227, 14.45929), (47.57941, 14.45984), (47.57631, 14.46092), (47.57517, 14.46079), (47.57344, 14.46115), (47.57305, 14.46119)]
    #
    # map = draw_poly_with_color(poly=po1, CO2m=float(min_CO2m), map=map, CO2m_min=min_CO2m,
    #                            CO2m_max=max_CO2m, weight=12)
    # map = draw_poly_with_color(poly=po2, CO2m=float(min_CO2m), map=map, CO2m_min=min_CO2m,
    #                            CO2m_max=max_CO2m, weight=12)
    # map = draw_poly_with_color(poly=po3, CO2m=float(min_CO2m), map=map, CO2m_min=min_CO2m,
    #                            CO2m_max=max_CO2m, weight=12)


    for i, row in df.iterrows():
        map = draw_poly_with_color(poly=row["points"], CO2m=float(row["CO2_gr_m"]), map=map, CO2m_min=min_CO2m, CO2m_max=max_CO2m)
    return map

def main():
    GO_ONLINE = False
    """
    Prepare object and environment
    """
    print("Starting ...")
    config = Config()
    result_path = config.RESULTS_PATH
    data_path = config.DATA_PATH
    map = Maps(config.MAPS_API_KEY)
    date_string = '2023-11-22 10:00:00.00'
    date_format = '%Y-%m-%d %H:%M:%S.%f'
    departure_date = datetime.strptime(date_string, date_format)
    map_vis = folium.Map(location=[48.19713493026252, 16.33754220312274], zoom_start=9)

    """
    Execute
    """
    # raw_to_smart_data(data_path1=data_path+"data_raw.xlsx", data_path2=data_path+"GPS.xlsx", output_path=data_path+"smart_data.csv")# to do
    # smart_to_points_data(data_path=data_path+"smart_data.csv", map=map, departure_date=departure_date, online=GO_ONLINE, output_path=data_path+"/poly_points_data.csv" ) #To do
    points_to_polyline_data(data_path=data_path+"poly_points_data.csv", output_path=data_path+"final_poly.csv") #Can improve
    # map_vis= draw_polyline_data(data_path=data_path+"final_poly.csv", map=map_vis) #OK

    # save the map
    map_vis.save(result_path+"map.html")

if __name__ == "__main__":
    main()
